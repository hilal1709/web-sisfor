<?php

namespace App\Http\Controllers;

use App\Models\Material;
use App\Models\Course;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Auth;
use Illuminate\Routing\Controller as BaseController;

class MaterialController extends BaseController
{
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
    {
        $query = Material::query()
            ->with(['course', 'user', 'verifications'])
            ->when($request->filled('verified'), function ($query) {
                $query->where('is_verified', true);
            })
            ->when($request->filled('course'), function ($query) use ($request) {
                $query->where('course_id', $request->course);
            })
            ->when($request->filled('search'), function ($query) use ($request) {
                $query->where(function ($q) use ($request) {
                    $q->where('title', 'like', "%{$request->search}%")
                        ->orWhere('description', 'like', "%{$request->search}%");
                });
            })
            ->when($request->filled('fakultas'), function ($query) use ($request) {
                $fakultas = $request->fakultas === 'other' ? $request->fakultas_other : $request->fakultas;
                if ($fakultas) {
                    $query->where('fakultas', 'like', "%{$fakultas}%");
                }
            })
            ->when($request->filled('jurusan'), function ($query) use ($request) {
                $jurusan = $request->jurusan === 'other' ? $request->jurusan_other : $request->jurusan;
                if ($jurusan) {
                    $query->where('jurusan', 'like', "%{$jurusan}%");
                }
            })
            ->when($request->filled('semester'), function ($query) use ($request) {
                $query->where('semester', $request->semester);
            })
            ->when($request->filled('mata_kuliah'), function ($query) use ($request) {
                $mata_kuliah = $request->mata_kuliah === 'other' ? $request->mata_kuliah_other : $request->mata_kuliah;
                if ($mata_kuliah) {
                    $query->where('mata_kuliah', 'like', "%{$mata_kuliah}%");
                }
            });

        $materials = $query->latest()->paginate(10);
        $courses = Course::all();

        return view('materials.index', compact('materials', 'courses'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        $courses = Course::all();
        return view('materials.create', compact('courses'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'required|string|max:2000',
            'file' => 'required|file|mimes:pdf,doc,docx,ppt,pptx,xls,xlsx,txt,zip,rar|max:20480', // Max 20MB, multiple file types
            'course_id' => 'required|exists:courses,id',
            'fakultas' => 'required|string|max:255',
            'jurusan' => 'required|string|max:255',
            'semester' => 'required|string|max:10',
            'mata_kuliah' => 'required|string|max:255',
            'kategori' => 'required|string|max:255',
            'fakultas_other' => 'required_if:fakultas,other|string|max:255',
            'jurusan_other' => 'required_if:jurusan,other|string|max:255',
            'mata_kuliah_other' => 'required_if:mata_kuliah,other|string|max:255',
        ], [
            'file.mimes' => 'File harus berformat: PDF, DOC, DOCX, PPT, PPTX, XLS, XLSX, TXT, ZIP, atau RAR',
            'file.max' => 'Ukuran file maksimal 20MB',
            'title.required' => 'Judul materi wajib diisi',
            'description.required' => 'Deskripsi materi wajib diisi',
            'course_id.required' => 'Mata kuliah wajib dipilih',
            'fakultas.required' => 'Fakultas wajib dipilih',
            'jurusan.required' => 'Jurusan wajib dipilih',
            'semester.required' => 'Semester wajib dipilih',
            'mata_kuliah.required' => 'Mata kuliah wajib dipilih',
            'fakultas_other.required_if' => 'Nama fakultas wajib diisi jika memilih "Lainnya"',
            'jurusan_other.required_if' => 'Nama jurusan wajib diisi jika memilih "Lainnya"',
            'mata_kuliah_other.required_if' => 'Nama mata kuliah wajib diisi jika memilih "Lainnya"',
        ]);

        // Handle "other" options for fakultas, jurusan, and mata_kuliah
        $fakultas = $validated['fakultas'] === 'other' ? $request->input('fakultas_other') : $validated['fakultas'];
        $jurusan = $validated['jurusan'] === 'other' ? $request->input('jurusan_other') : $validated['jurusan'];
        $mata_kuliah = $validated['mata_kuliah'] === 'other' ? $request->input('mata_kuliah_other') : $validated['mata_kuliah'];

        // Generate unique filename to prevent conflicts
        $originalName = $request->file('file')->getClientOriginalName();
        $extension = $request->file('file')->getClientOriginalExtension();
        $filename = time() . '_' . str_replace(' ', '_', pathinfo($originalName, PATHINFO_FILENAME)) . '.' . $extension;

        $filePath = $request->file('file')->storeAs('materials', $filename, 'public');

        // Log file upload attempt
        Log::info('Material Upload - File Storage', [
            'original_name' => $originalName,
            'stored_path' => $filePath,
            'file_exists' => Storage::disk('public')->exists($filePath)
        ]);

        try {
            DB::beginTransaction();

            $material = Material::create([
                'title' => $validated['title'],
                'description' => $validated['description'],
                'file_path' => $filePath,
                'course_id' => $validated['course_id'],
                'user_id' => Auth::id(),
                'original_filename' => $originalName,
                'fakultas' => $fakultas,
                'jurusan' => $jurusan,
                'semester' => $validated['semester'],
                'mata_kuliah' => $mata_kuliah,
                'kategori' => $validated['kategori'],
            ]);

            // Log successful material creation
            Log::info('Material Upload - Database Entry Created', [
                'material_id' => $material->id,
                'user_id' => Auth::id(),
                'data' => $material->toArray()
            ]);


            DB::commit();
            return redirect()->route('materials.show', $material)
                ->with('success', 'Materi berhasil diunggah! Menunggu verifikasi dari dosen.');
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Material Upload - Error', [
                'user_id' => Auth::id(),
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return redirect()->back()->withInput()->with('error', 'Terjadi kesalahan saat mengunggah materi.');
        }
    }

    /**
     * Display the specified resource.
     */
    public function show(Material $material)
    {
        $material->load(['course', 'user', 'discussions' => function ($query) {
            $query->whereNull('parent_id')->with(['user', 'replies.user']);
        }]);
        return view('materials.show', compact('material'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Material $material)
    {
        // Check if user is the owner of the material
        if ($material->user_id !== Auth::id()) {
            abort(403, 'Anda tidak memiliki akses untuk mengedit materi ini.');
        }

        $courses = Course::all();
        return view('materials.edit', compact('material', 'courses'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, $id)
    {
        $material = Material::findOrFail($id);

        // Log untuk debugging
        Log::info('Update Material Request', [
            'authenticated_user' => Auth::id(),
            'material_owner' => $material->user_id,
            'material_id' => $id,
            'request_data' => $request->except(['file'])
        ]);

        // Check if user is authenticated
        if (!Auth::check()) {
            Log::warning('Unauthorized access attempt', [
                'ip' => $request->ip(),
                'material_id' => $id
            ]);
            abort(401, 'Silakan login terlebih dahulu.');
        }

        // Check if user is the owner of the material
        if ($material->user_id !== Auth::id()) {
            Log::warning('Forbidden access attempt', [
                'user_id' => Auth::id(),
                'material_owner' => $material->user_id,
                'material_id' => $id
            ]);
            abort(403, 'Anda tidak memiliki akses untuk mengedit materi ini.');
        }

        // Store original data for logging
        $originalData = $material->toArray();

        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'required|string|max:2000',
            'file' => 'nullable|file|mimes:pdf,doc,docx,ppt,pptx,xls,xlsx,txt,zip,rar|max:20480',
            'course_id' => 'required|exists:courses,id',
            'fakultas' => 'required|string|max:255',
            'jurusan' => 'required|string|max:255',
            'semester' => 'required|string|max:10',
            'mata_kuliah' => 'required|string|max:255',
            'kategori' => 'required|string|max:255',
            'fakultas_other' => 'required_if:fakultas,other|string|max:255',
            'jurusan_other' => 'required_if:jurusan,other|string|max:255',
            'mata_kuliah_other' => 'required_if:mata_kuliah,other|string|max:255',
        ], [
            'file.mimes' => 'File harus berformat: PDF, DOC, DOCX, PPT, PPTX, XLS, XLSX, TXT, ZIP, atau RAR',
            'file.max' => 'Ukuran file maksimal 20MB',
            'title.required' => 'Judul materi wajib diisi',
            'description.required' => 'Deskripsi materi wajib diisi',
            'course_id.required' => 'Mata kuliah wajib dipilih',
            'fakultas.required' => 'Fakultas wajib dipilih',
            'jurusan.required' => 'Jurusan wajib dipilih',
            'semester.required' => 'Semester wajib dipilih',
            'mata_kuliah.required' => 'Mata kuliah wajib dipilih',
            'fakultas_other.required_if' => 'Nama fakultas wajib diisi jika memilih "Lainnya"',
            'jurusan_other.required_if' => 'Nama jurusan wajib diisi jika memilih "Lainnya"',
            'mata_kuliah_other.required_if' => 'Nama mata kuliah wajib diisi jika memilih "Lainnya"',
        ]);

        // Handle "other" options for fakultas, jurusan, and mata_kuliah
        $fakultas = $validated['fakultas'] === 'other' ? $request->input('fakultas_other') : $validated['fakultas'];
        $jurusan = $validated['jurusan'] === 'other' ? $request->input('jurusan_other') : $validated['jurusan'];
        $mata_kuliah = $validated['mata_kuliah'] === 'other' ? $request->input('mata_kuliah_other') : $validated['mata_kuliah'];

        // Prepare update data while preserving existing values
        $updateData = [
            'title' => $validated['title'],
            'description' => $validated['description'],
            'course_id' => $validated['course_id'],
            'fakultas' => $fakultas,
            'jurusan' => $jurusan,
            'semester' => $validated['semester'],
            'mata_kuliah' => $mata_kuliah,
            'kategori' => $validated['kategori'],
            'file_path' => $material->file_path, // Preserve existing file path
            'original_filename' => $material->original_filename, // Preserve original filename
            'is_verified' => $material->is_verified, // Preserve verification status
            'user_id' => $material->user_id // Preserve user id
        ];

        if ($request->hasFile('file')) {
            // Upload new file first
            $originalName = $request->file('file')->getClientOriginalName();
            $extension = $request->file('file')->getClientOriginalExtension();
            $filename = time() . '_' . str_replace(' ', '_', pathinfo($originalName, PATHINFO_FILENAME)) . '.' . $extension;

            // Store the new file
            $filePath = $request->file('file')->storeAs('materials', $filename, 'public');

            if ($filePath) {
                // Only delete old file after successful upload
                if ($material->file_path && Storage::disk('public')->exists($material->file_path)) {
                    Storage::disk('public')->delete($material->file_path);
                }

                $updateData['file_path'] = $filePath;
                $updateData['original_filename'] = $originalName;
            }

            $filePath = $request->file('file')->storeAs('materials', $filename, 'public');

            $updateData['file_path'] = $filePath;
            $updateData['original_filename'] = $originalName;
        }

        try {
            // Use DB transaction to ensure data consistency
            DB::beginTransaction();

            // Log the update data for debugging
            Log::info('Material Update - Before Update', [
                'material_id' => $material->id,
                'current_data' => $material->toArray(),
                'update_data' => $updateData
            ]);

            // Begin the update process
            $material->fill($updateData);

            // Check for any critical changes
            $changedFields = $material->getDirty();
            Log::info('Material Update - Changed Fields', [
                'material_id' => $material->id,
                'changed_fields' => $changedFields
            ]);

            $material->save();

            // Verify data integrity
            $this->verifyDataIntegrity($material, $updateData);

            // Log successful update with before/after comparison
            Log::info('Material Update - Successful', [
                'material_id' => $material->id,
                'original_data' => $originalData,
                'updated_data' => $material->fresh()->toArray(),
                'changed_fields' => $changedFields
            ]);

            DB::commit();
            return redirect()->route('materials.show', $material)
                ->with('success', 'Materi berhasil diperbarui!');
        } catch (\Exception $e) {
            DB::rollBack();

            // Log the error with comprehensive context
            Log::error('Material Update - Error', [
                'material_id' => $material->id,
                'user_id' => Auth::id(),
                'original_data' => $originalData,
                'update_data' => $updateData,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            // Clean up any uploaded files if the update failed
            if (isset($filePath) && Storage::disk('public')->exists($filePath)) {
                try {
                    Storage::disk('public')->delete($filePath);
                    Log::info('Cleaned up failed upload file', ['file_path' => $filePath]);
                } catch (\Exception $cleanupError) {
                    Log::error('Failed to clean up uploaded file', [
                        'file_path' => $filePath,
                        'error' => $cleanupError->getMessage()
                    ]);
                }
            }

            $errorMessage = app()->environment('local')
                ? 'Error: ' . $e->getMessage()
                : 'Terjadi kesalahan saat memperbarui materi. Silakan coba lagi.';

            return redirect()->back()
                ->withInput()
                ->with('error', $errorMessage);
        }
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Material $material)
    {
        // Check if user is the owner of the material
        if ($material->user_id !== Auth::id()) {
            abort(403, 'Anda tidak memiliki akses untuk menghapus materi ini.');
        }

        // Delete file from storage
        if ($material->file_path && Storage::disk('public')->exists($material->file_path)) {
            Storage::disk('public')->delete($material->file_path);
        }

        $material->delete();

        return redirect()->route('materials.index')
            ->with('success', 'Materi berhasil dihapus!');
    }

    public function toggleSave(Material $material)
    {
        Auth::user()->savedMaterials()->toggle($material->id);
        return back()->with('success', 'Material saved status updated!');
    }

    public function download(Material $material)
    {
        $material->increment('downloads_count');

        $filePath = storage_path('app/public/' . $material->file_path);
        $downloadName = $material->original_filename ?? basename($material->file_path);

        if (!file_exists($filePath)) {
            return back()->with('error', 'File tidak ditemukan.');
        }

        return response()->download($filePath, $downloadName);
    }

    public function saved()
    {
        $materials = Auth::user()->savedMaterials()->with(['course', 'user'])->paginate(10);
        return view('materials.saved', compact('materials'));
    }

    /**
     * Verify data integrity after update
     */
    private function verifyDataIntegrity(Material $material, array $updateData)
    {
        $material->refresh();

        // Check if any critical fields are missing
        $criticalFields = ['title', 'file_path', 'original_filename', 'user_id', 'course_id'];
        $missingFields = [];

        foreach ($criticalFields as $field) {
            if (empty($material->$field)) {
                $missingFields[] = $field;
            }
        }

        if (!empty($missingFields)) {
            Log::error('Material Update - Data Integrity Check Failed', [
                'material_id' => $material->id,
                'missing_fields' => $missingFields,
                'current_data' => $material->toArray(),
                'update_data' => $updateData
            ]);

            throw new \Exception('Data integrity check failed: ' . implode(', ', $missingFields) . ' cannot be empty');
        }

        return true;
    }
}
